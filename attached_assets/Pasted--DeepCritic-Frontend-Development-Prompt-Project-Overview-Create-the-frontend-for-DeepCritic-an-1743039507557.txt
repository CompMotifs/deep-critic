# DeepCritic Frontend Development Prompt

## Project Overview
Create the frontend for DeepCritic, an online application that enables users to receive document reviews from an ensemble of language model agents. This is strictly a frontend project that will communicate with a separate backend API.

## Core Requirements
The frontend should:
1. Allow users to upload PDF documents
2. Accept custom review prompts/criteria from users
3. Let users select which AI agents to include in the review ensemble
4. Send this data to the backend API
5. Display loading states while waiting for results
6. Render the review dashboard when results are returned
7. Allow for PDF export of the dashboard

## UI Components

### 1. Document Upload Section
- Drag-and-drop interface for PDF files
- File browser button alternative
- Preview of selected document (name, size, page count if possible)
- Error handling for invalid file types or sizes
- Maximum file size validation

### 2. Prompt Configuration
- Text area for users to specify review criteria
- Character counter with reasonable limits (e.g., 500 characters)
- Clear button and helpful placeholder text
- Sample prompts for users who need guidance

### 3. Model Selection Panel
- Checkboxes for each available model:
  - Claude 3.7 Sonnet
  - Claude 3 Opus
  - o3-mini-high
  - [Other options]
- Brief description tooltip for each model
- "Select All" and "Clear All" options

### 4. Action Button
- Prominent "DeepCritic Search" button
- Disabled state when required inputs are missing
- Visual feedback on click

### 5. Loading Interface
- Progress indicator showing completion percentage
- Status messages about current processing stage
- Visual representation of which models are currently analyzing
- Estimated time remaining display
- Option to cancel request

### 6. Results Dashboard
- Summary section aggregating key findings
- Individual sections for each model's feedback
- Comparison view for contrasting different model opinions
- Expandable/collapsible sections
- "Download as PDF" button
- Timestamp of analysis

## API Integration Details

### Endpoints to Implement

1. **Document Submission Endpoint**
   - Method: POST
   - URL: `/api/submit`
   - Content Type: `multipart/form-data`
   - Payload:
     - `document`: PDF file
     - `prompt`: String
     - `models`: Array of strings
   - Response: Job ID and initial status

2. **Status Check Endpoint**
   - Method: GET
   - URL: `/api/status/{jobId}`
   - Response: Current status, progress percentage, estimated time remaining

3. **Results Retrieval Endpoint**
   - Method: GET
   - URL: `/api/results/{jobId}`
   - Response: Complete analysis results from all models

### API Request/Response Examples

**Submission Request Example:**
```javascript
const formData = new FormData();
formData.append('document', pdfFile);
formData.append('prompt', userPromptText);
formData.append('models', JSON.stringify(selectedModels));

fetch('https://api.deepcritic.example/api/submit', {
  method: 'POST',
  body: formData
})
.then(response => response.json())
.then(data => {
  const jobId = data.jobId;
  startPollingStatus(jobId);
});
```

**Status Response Example:**
```json
{
  "jobId": "abc123xyz",
  "status": "processing",
  "progress": 0.45,
  "currentModel": "claude-3-7-sonnet",
  "completedModels": ["o3-mini-high"],
  "remainingModels": ["claude-3-opus"],
  "estimatedTimeRemaining": 120
}
```

**Results Response Example:**
```json
{
  "jobId": "abc123xyz",
  "documentName": "research-paper.pdf",
  "prompt": "Evaluate the methodology and findings",
  "timestamp": "2025-03-26T14:30:00Z",
  "summary": "Overall assessment across all models",
  "modelResults": [
    {
      "modelName": "claude-3-7-sonnet",
      "analysis": "Detailed text of the analysis...",
      "keyPoints": ["Strong methodology", "Limited sample size", "Novel approach"],
      "sentiment": 0.75,
      "confidence": 0.92
    },
    {
      "modelName": "o3-mini-high",
      "analysis": "Different perspective on the same document...",
      "keyPoints": ["Innovative technique", "Needs more validation", "Promising results"],
      "sentiment": 0.65,
      "confidence": 0.88
    }
  ],
  "comparativeAnalysis": "Both models agree on the innovative nature but differ on confidence in results..."
}
```

## Development Approach

### Technical Stack
- **Framework**: React.js
- **Styling**: Tailwind CSS (recommended for rapid development)
- **PDF Handling**: 
  - react-pdf for viewing
  - jspdf and html2canvas for dashboard export
- **State Management**: React Context or Redux
- **API Communication**: Axios or Fetch API

### Project Structure
```
src/
├── components/
│   ├── DocumentUpload.jsx
│   ├── PromptInput.jsx
│   ├── ModelSelection.jsx
│   ├── LoadingIndicator.jsx
│   ├── ResultsDashboard.jsx
│   └── PDFExport.jsx
├── services/
│   ├── api.js
│   └── pdfService.js
├── hooks/
│   ├── useJobStatus.js
│   └── useFileUpload.js
├── utils/
│   ├── formatters.js
│   └── validators.js
├── context/
│   └── AppContext.jsx
├── App.jsx
└── index.jsx
```

### Mock Backend for Development
Before connecting to the real backend API, implement mock responses:

```javascript
// mockApi.js
export const submitDocument = async (formData) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500));
  
  return {
    jobId: "mock-job-123",
    status: "queued",
    estimatedTime: 180
  };
};

export const checkStatus = async (jobId) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // Return different statuses based on call count to simulate progress
  const callCount = window.statusCallCount = (window.statusCallCount || 0) + 1;
  
  if (callCount < 3) {
    return {
      jobId,
      status: "processing",
      progress: 0.3 * callCount,
      currentModel: "claude-3-7-sonnet",
      completedModels: [],
      remainingModels: ["o3-mini-high", "claude-3-opus"],
      estimatedTimeRemaining: 180 - (60 * callCount)
    };
  } else if (callCount < 5) {
    return {
      jobId,
      status: "processing",
      progress: 0.3 * 3 + 0.15 * (callCount - 3),
      currentModel: "o3-mini-high",
      completedModels: ["claude-3-7-sonnet"],
      remainingModels: ["claude-3-opus"],
      estimatedTimeRemaining: 60 - (30 * (callCount - 3))
    };
  } else {
    return {
      jobId,
      status: "completed",
      progress: 1.0,
      currentModel: null,
      completedModels: ["claude-3-7-sonnet", "o3-mini-high", "claude-3-opus"],
      remainingModels: [],
      estimatedTimeRemaining: 0
    };
  }
};

export const getResults = async (jobId) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  return {
    jobId,
    documentName: "sample-document.pdf",
    prompt: "Analyze the strengths and weaknesses of this document",
    timestamp: new Date().toISOString(),
    summary: "This document presents innovative ideas but lacks sufficient supporting evidence in several sections.",
    modelResults: [
      {
        modelName: "claude-3-7-sonnet",
        analysis: "The document shows strong conceptual thinking but would benefit from more empirical data to support its claims. The methodology section is particularly well-structured, though the conclusions drawn may be overstated given the limitations acknowledged in the study design.",
        keyPoints: [
          "Strong conceptual framework",
          "Well-structured methodology",
          "Limited empirical support",
          "Potentially overstated conclusions"
        ],
        sentiment: 0.65,
        confidence: 0.88
      },
      {
        modelName: "o3-mini-high",
        analysis: "This document presents novel approaches to the problem domain, with a clear understanding of existing literature. However, the analysis section contains some logical inconsistencies, and certain claims would benefit from additional citations.",
        keyPoints: [
          "Novel approach to problem",
          "Good literature review",
          "Some logical inconsistencies",
          "Insufficient citations"
        ],
        sentiment: 0.58,
        confidence: 0.79
      },
      {
        modelName: "claude-3-opus",
        analysis: "The document demonstrates comprehensive knowledge of the subject matter and presents arguments in a structured manner. The introduction effectively establishes context, though the discussion section could more thoroughly address counterarguments. The conclusion offers valuable insights but some recommendations lack practical implementation details.",
        keyPoints: [
          "Comprehensive subject knowledge",
          "Effective introduction",
          "Insufficient treatment of counterarguments",
          "Recommendations lack implementation details"
        ],
        sentiment: 0.72,
        confidence: 0.91
      }
    ],
    comparativeAnalysis: "All models identified strengths in the document's conceptual framework and structure, while noting concerns about evidential support. Claude 3 Opus provided the most positive assessment, particularly valuing the comprehensive subject knowledge, while o3-mini-high was more critical of logical consistency issues."
  };
};
```

## Features to Implement

### Required Features
1. PDF upload with validation
2. Prompt input with character limit
3. Model selection with descriptions
4. Form submission to API
5. Status polling with progress display
6. Results dashboard with model comparisons
7. PDF export functionality

### Stretch Goals
1. User authentication
2. Saved history of previous analyses
3. Advanced filtering of results
4. Customizable dashboard layouts
5. Document comparison (multiple PDFs)

## UI/UX Guidelines
- Clean, professional interface
- Consistent color scheme
- Clear visual hierarchy
- Responsive design for all screen sizes
- Accessible (WCAG 2.1 AA compliant)
- Helpful error messages and tooltips
- Loading states and animations

## Error Handling
- Validate file types before upload
- Handle network failures gracefully
- Provide retry options for failed requests
- Show user-friendly error messages
- Implement timeout handling for long-running jobs

## Testing Strategy
- Component tests for UI elements
- Mock API integration tests
- Responsive design testing
- Error state testing
- PDF generation testing

## Deployment Considerations
- Configure environment variables for API endpoints
- Set up CORS for API communication
- Optimize bundle size for production
- Implement caching strategies where appropriate

## Final Deliverables
- Functioning frontend that communicates with the specified API endpoints
- Mobile-responsive design
- Documentation of components and API integration
- Source code with clear organization and comments